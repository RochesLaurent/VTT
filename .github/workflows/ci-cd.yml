name: OnlyRoll CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '22'
  COMPOSER_VERSION: '2.8.9'

jobs:
  # ======================
  # BACKEND TESTS
  # ======================
  backend-tests:
    name: Backend Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.3']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: TestPassword123!
          MYSQL_DATABASE: onlyroll_test
          MYSQL_USER: onlyroll_user
          MYSQL_PASSWORD: TestPassword123!
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, fileinfo, tokenizer
          coverage: xdebug
          tools: composer:2.8.9

      - name: Get Composer Cache Directory
        id: composer-cache
        shell: bash
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        working-directory: backend

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction
        working-directory: backend

      - name: Create .env.test for OnlyRoll
        run: |
          cat > .env.test << EOF
          # === ENVIRONNEMENT TEST ===
          APP_ENV=test
          NODE_ENV=test
          
          # === BASE DE DONNÉES TEST ===
          DATABASE_URL=mysql://onlyroll_user:TestPassword123!@127.0.0.1:3306/onlyroll_test
          MYSQL_DATABASE=onlyroll_test
          MYSQL_USER=onlyroll_user
          MYSQL_PASSWORD=TestPassword123!
          
          # === JWT TOKENS TEST ===
          JWT_SECRET_KEY=test-secret-key-for-ci-only
          JWT_PUBLIC_KEY=test-public-key-for-ci-only
          JWT_PASSPHRASE=TestPassphrase123!
          
          # === APPLICATION TEST ===
          APP_SECRET=test-app-secret-for-ci-only
          
          # === URLS TEST ===
          API_URL=http://localhost:8000/api
          WS_URL=ws://localhost:3001
          FRONTEND_URL=http://localhost:3000
          BACKEND_URL=http://localhost:8000
          
          # === CORS TEST ===
          CORS_ORIGIN=http://localhost:3000
          EOF
        working-directory: backend

      - name: Create var directory
        run: |
          mkdir -p var/cache var/log
          chmod -R 777 var
        working-directory: backend

      - name: Run migrations for OnlyRoll
        run: |
          php bin/console doctrine:database:create --if-not-exists --env=test || true
          php bin/console doctrine:migrations:migrate --no-interaction --env=test || true
        working-directory: backend

      - name: Run PHPUnit tests
        run: |
          if [ -f bin/phpunit ]; then
            php bin/phpunit
          elif [ -f vendor/bin/phpunit ]; then
            vendor/bin/phpunit
          else
            echo "PHPUnit not found, skipping tests for now"
          fi
        working-directory: backend

      - name: Run PHPStan
        run: |
          if [ -f vendor/bin/phpstan ]; then
            vendor/bin/phpstan analyse src --level=5
          else
            echo "PHPStan not configured yet"
          fi
        working-directory: backend
        continue-on-error: true

  # ======================
  # FRONTEND TESTS
  # ======================
  frontend-tests:
    name: Frontend Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['22.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        working-directory: frontend

      - name: Create .env for frontend tests
        run: |
          cat > .env << EOF
          VITE_API_URL=http://localhost:8000/api
          VITE_WS_URL=ws://localhost:3001
          VITE_APP_NAME=OnlyRoll
          EOF
        working-directory: frontend

      - name: Run linting
        run: npm run lint || true
        working-directory: frontend
        continue-on-error: true

      - name: Run type checking
        run: npm run type-check || true
        working-directory: frontend
        continue-on-error: true

      - name: Run unit tests
        run: |
          if npm run | grep -q "test:unit"; then
            npm run test:unit -- --passWithNoTests
          else
            echo "No unit tests configured yet"
          fi
        working-directory: frontend

      - name: Build application
        run: npm run build
        working-directory: frontend
        env:
          NODE_OPTIONS: --max-old-space-size=4096

  # ======================
  # WEBSOCKET TESTS
  # ======================
  websocket-tests:
    name: WebSocket Server Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: websocket-server/package-lock.json

      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        working-directory: websocket-server

      - name: Create .env for websocket tests
        run: |
          cat > .env << EOF
          PORT=3001
          JWT_SECRET=test-secret-key-for-ci-only
          REDIS_URL=redis://localhost:6379
          BACKEND_URL=http://localhost:8000
          NODE_ENV=test
          EOF
        working-directory: websocket-server

      - name: Run linting
        run: npm run lint || echo "Linting not configured yet"
        working-directory: websocket-server

      - name: Run tests
        run: npm test || echo "Tests not configured yet"
        working-directory: websocket-server

  # ======================
  # INTEGRATION TESTS
  # ======================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, websocket-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: TestPassword123!
          MYSQL_DATABASE: onlyroll_test
          MYSQL_USER: onlyroll_user
          MYSQL_PASSWORD: TestPassword123!
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test full stack connectivity
        run: |
          echo "Testing MySQL connection..."
          mysql -h 127.0.0.1 -P 3306 -u onlyroll_user -pTestPassword123! -e "SELECT 1"
          
          echo "Testing Redis connection..."
          redis-cli -h 127.0.0.1 -p 6379 ping

  # ======================
  # DOCKER BUILD
  # ======================
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, websocket-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Docker image
        run: |
          docker build \
            --build-arg PHP_VERSION=8.3-fpm \
            -t onlyroll-backend:${{ github.sha }} \
            ./backend
        continue-on-error: true

      - name: Build Frontend Docker image
        run: |
          docker build \
            --build-arg NODE_VERSION=22-alpine \
            -t onlyroll-frontend:${{ github.sha }} \
            ./frontend
        continue-on-error: true

      - name: Build WebSocket Docker image
        run: |
          docker build \
            --build-arg NODE_VERSION=22-alpine \
            -t onlyroll-websocket:${{ github.sha }} \
            ./websocket-server
        continue-on-error: true

  # ======================
  # DEPLOY STAGING (dev branch)
  # ======================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build]
    if: github.ref == 'refs/heads/dev'
    environment:
      name: staging
      url: https://staging.onlyroll.com

    steps:
      - name: Deploy OnlyRoll to staging
        run: |
          echo "Deploying OnlyRoll dev branch to staging..."
          # Les vraies commandes de déploiement viendront ici

  # ======================
  # DEPLOY PRODUCTION (main branch)
  # ======================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://onlyroll.com

    steps:
      - name: Deploy OnlyRoll to production
        run: |
          echo "Deploying OnlyRoll main branch to production..."
          # Les vraies commandes de déploiement viendront ici